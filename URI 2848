#include<iostream>
#include<map>
using namespace std;
using ll = long long;
using ull = unsigned long long;

ll max(ll &a, ll &b)		{return a > b ? a : b;}
ll min(ll &a, ll &b)		{return a < b ? a : b;}
ll subtraction(ll &a, ll &b)	{return max(a, b) - min(a, b);}

int main(){
	ull vector_size;
	ll test_case, i, j, drawn_element;
	pair<ll, ll> subvector_extreme;	// First = Less, second = Greater
	pair<ll, ll> every_move;	// First = Gugu, second = Dadriel
	pair<ll, ll> diference;		// First = Gugu, second = Dadriel
	map<ll, ll>::iterator it;
	map<ll, ll> map;

	scanf("%llu %lld", &vector_size, &test_case);
	ll vector[vector_size];
	for(i=0; i<vector_size; scanf("%lld", &vector[i]), ++i);

	while(test_case--){
		scanf("%lld %lld", &subvector_extreme.first, &subvector_extreme.second);		// Read the extremes of the subvector
		scanf("%lld", &drawn_element);								// Number drawn
		scanf("%lld %lld", &every_move.first, &every_move.second);				// Number chosen by Gugu and Dadriel

		for(j=subvector_extreme.first-1; j<subvector_extreme.second; map[vector[j]]++, ++j);	// Count and sort the subvector

		it=map.begin();
		for(j=it->second; j<drawn_element; ++it, j+=it->second);				// Find the drawn element in the drawn_element position

		diference.first  = subtraction(every_move.first, it->second);
		diference.second = subtraction(every_move.second, it->second);

		if	(diference.first == diference.second)	printf("%lld %lld E\n", it->first, it->second);
		else if	(diference.first < diference.second)	printf("%lld %lld G\n", it->first, it->second);
		else						printf("%lld %lld D\n", it->first, it->second);

		map.clear();
	}
}
